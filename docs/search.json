[
  {
    "objectID": "Modeling Practice.html",
    "href": "Modeling Practice.html",
    "title": "Modeling Practice",
    "section": "",
    "text": "First, we need to read in the data.\n\nlibrary(readr)\n\nbike_data &lt;- readr::read_csv(\"SeoulBikeData.csv\", locale = locale(encoding=\"latin1\"))\n\nRows: 8760 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Date, Seasons, Holiday, Functioning Day\ndbl (10): Rented Bike Count, Hour, Temperature(°C), Humidity(%), Wind speed ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nBefore we can do any analysis, we need to make sure there are not any missing values in our data.\n\ncolSums(is.na(bike_data))\n\n                     Date         Rented Bike Count                      Hour \n                        0                         0                         0 \n          Temperature(°C)               Humidity(%)          Wind speed (m/s) \n                        0                         0                         0 \n         Visibility (10m) Dew point temperature(°C)   Solar Radiation (MJ/m2) \n                        0                         0                         0 \n             Rainfall(mm)             Snowfall (cm)                   Seasons \n                        0                         0                         0 \n                  Holiday           Functioning Day \n                        0                         0 \n\n\nLuckily there appears to be no missing data! Next, let’s check the column types to make sure the values within the columns make sense.\n\nbike_data\n\n# A tibble: 8,760 × 14\n   Date       `Rented Bike Count`  Hour `Temperature(°C)` `Humidity(%)`\n   &lt;chr&gt;                    &lt;dbl&gt; &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n 1 01/12/2017                 254     0              -5.2            37\n 2 01/12/2017                 204     1              -5.5            38\n 3 01/12/2017                 173     2              -6              39\n 4 01/12/2017                 107     3              -6.2            40\n 5 01/12/2017                  78     4              -6              36\n 6 01/12/2017                 100     5              -6.4            37\n 7 01/12/2017                 181     6              -6.6            35\n 8 01/12/2017                 460     7              -7.4            38\n 9 01/12/2017                 930     8              -7.6            37\n10 01/12/2017                 490     9              -6.5            27\n# ℹ 8,750 more rows\n# ℹ 9 more variables: `Wind speed (m/s)` &lt;dbl&gt;, `Visibility (10m)` &lt;dbl&gt;,\n#   `Dew point temperature(°C)` &lt;dbl&gt;, `Solar Radiation (MJ/m2)` &lt;dbl&gt;,\n#   `Rainfall(mm)` &lt;dbl&gt;, `Snowfall (cm)` &lt;dbl&gt;, Seasons &lt;chr&gt;, Holiday &lt;chr&gt;,\n#   `Functioning Day` &lt;chr&gt;\n\n\nThe data in the Hour column should really be of type “character”, since it is representing the hour in a day, which will always be between 0 and 23.\nAdditionally, the Date column needs to be converted to actual dates.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nbike_data &lt;- bike_data |&gt;\n  mutate(Hour = as.character(Hour),\n         Date = mdy(Date))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `Date = mdy(Date)`.\nCaused by warning:\n!  5304 failed to parse.\n\nbike_data\n\n# A tibble: 8,760 × 14\n   Date       `Rented Bike Count` Hour  `Temperature(°C)` `Humidity(%)`\n   &lt;date&gt;                   &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n 1 2017-01-12                 254 0                  -5.2            37\n 2 2017-01-12                 204 1                  -5.5            38\n 3 2017-01-12                 173 2                  -6              39\n 4 2017-01-12                 107 3                  -6.2            40\n 5 2017-01-12                  78 4                  -6              36\n 6 2017-01-12                 100 5                  -6.4            37\n 7 2017-01-12                 181 6                  -6.6            35\n 8 2017-01-12                 460 7                  -7.4            38\n 9 2017-01-12                 930 8                  -7.6            37\n10 2017-01-12                 490 9                  -6.5            27\n# ℹ 8,750 more rows\n# ℹ 9 more variables: `Wind speed (m/s)` &lt;dbl&gt;, `Visibility (10m)` &lt;dbl&gt;,\n#   `Dew point temperature(°C)` &lt;dbl&gt;, `Solar Radiation (MJ/m2)` &lt;dbl&gt;,\n#   `Rainfall(mm)` &lt;dbl&gt;, `Snowfall (cm)` &lt;dbl&gt;, Seasons &lt;chr&gt;, Holiday &lt;chr&gt;,\n#   `Functioning Day` &lt;chr&gt;\n\n\nIt also seems like it would be a good idea to coerce the data in Seasons, Holiday, and Functioning Day to be factors since they only take on a few distinct, non-numeric values.\n\nbike_data &lt;- bike_data |&gt;\n  mutate(Seasons = as.factor(Seasons),\n         Holiday = as.factor(Holiday),\n         `Functioning Day` = as.factor(`Functioning Day`))\nbike_data\n\n# A tibble: 8,760 × 14\n   Date       `Rented Bike Count` Hour  `Temperature(°C)` `Humidity(%)`\n   &lt;date&gt;                   &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n 1 2017-01-12                 254 0                  -5.2            37\n 2 2017-01-12                 204 1                  -5.5            38\n 3 2017-01-12                 173 2                  -6              39\n 4 2017-01-12                 107 3                  -6.2            40\n 5 2017-01-12                  78 4                  -6              36\n 6 2017-01-12                 100 5                  -6.4            37\n 7 2017-01-12                 181 6                  -6.6            35\n 8 2017-01-12                 460 7                  -7.4            38\n 9 2017-01-12                 930 8                  -7.6            37\n10 2017-01-12                 490 9                  -6.5            27\n# ℹ 8,750 more rows\n# ℹ 9 more variables: `Wind speed (m/s)` &lt;dbl&gt;, `Visibility (10m)` &lt;dbl&gt;,\n#   `Dew point temperature(°C)` &lt;dbl&gt;, `Solar Radiation (MJ/m2)` &lt;dbl&gt;,\n#   `Rainfall(mm)` &lt;dbl&gt;, `Snowfall (cm)` &lt;dbl&gt;, Seasons &lt;fct&gt;, Holiday &lt;fct&gt;,\n#   `Functioning Day` &lt;fct&gt;\n\n\nLastly, let’s rename the variables in lower snake case.\n\nbike_data &lt;- bike_data |&gt;\n  rename(\"date\" = \"Date\", \"rented_bike_count\" = \"Rented Bike Count\", \"hour\"\n         = \"Hour\", \"temperature\" = \"Temperature(°C)\", \"humidity\" = \n         \"Humidity(%)\", \"wind_speed\" = \"Wind speed (m/s)\", \"visibility\" =\n         \"Visibility (10m)\", \"dew_point_temperature\" = \n           \"Dew point temperature(°C)\", \"solar_radiation\" = \n           \"Solar Radiation (MJ/m2)\",\n         \"rainfall\" = \"Rainfall(mm)\", \"snowfall\" = \"Snowfall (cm)\", \n         \"seasons\" = \"Seasons\", \"holiday\" = \"Holiday\", \"functioning_day\" = \n         \"Functioning Day\")\nbike_data\n\n# A tibble: 8,760 × 14\n   date       rented_bike_count hour  temperature humidity wind_speed visibility\n   &lt;date&gt;                 &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1 2017-01-12               254 0            -5.2       37        2.2       2000\n 2 2017-01-12               204 1            -5.5       38        0.8       2000\n 3 2017-01-12               173 2            -6         39        1         2000\n 4 2017-01-12               107 3            -6.2       40        0.9       2000\n 5 2017-01-12                78 4            -6         36        2.3       2000\n 6 2017-01-12               100 5            -6.4       37        1.5       2000\n 7 2017-01-12               181 6            -6.6       35        1.3       2000\n 8 2017-01-12               460 7            -7.4       38        0.9       2000\n 9 2017-01-12               930 8            -7.6       37        1.1       2000\n10 2017-01-12               490 9            -6.5       27        0.5       1928\n# ℹ 8,750 more rows\n# ℹ 7 more variables: dew_point_temperature &lt;dbl&gt;, solar_radiation &lt;dbl&gt;,\n#   rainfall &lt;dbl&gt;, snowfall &lt;dbl&gt;, seasons &lt;fct&gt;, holiday &lt;fct&gt;,\n#   functioning_day &lt;fct&gt;\n\n\nNow, grouping by date, seasons, and holiday, we will compute the sum of rented_bike_count, rainfall, and snowfall, and also compute the mean of all weather related variables. The data we obtain by doing this will be the data that we do modeling on.\n\nbike_data &lt;- bike_data |&gt;\n  group_by(date, seasons, holiday) |&gt;\n  summarize(across(c(rented_bike_count, rainfall, snowfall), \n                   list(\"sum\" = sum), \n                   .names = \"{.fn}_{.col}\"),\n            across(c(temperature, humidity, wind_speed,\n                     dew_point_temperature, solar_radiation,\n                     rainfall, snowfall),\n                   list(\"mean\" = mean),\n                   .names = \"{.fn}_{.col}\"))\n\n`summarise()` has grouped output by 'date', 'seasons'. You can override using\nthe `.groups` argument."
  },
  {
    "objectID": "Modeling Practice.html#eda",
    "href": "Modeling Practice.html#eda",
    "title": "Modeling Practice",
    "section": "",
    "text": "First, we need to read in the data.\n\nlibrary(readr)\n\nbike_data &lt;- readr::read_csv(\"SeoulBikeData.csv\", locale = locale(encoding=\"latin1\"))\n\nRows: 8760 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Date, Seasons, Holiday, Functioning Day\ndbl (10): Rented Bike Count, Hour, Temperature(°C), Humidity(%), Wind speed ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nBefore we can do any analysis, we need to make sure there are not any missing values in our data.\n\ncolSums(is.na(bike_data))\n\n                     Date         Rented Bike Count                      Hour \n                        0                         0                         0 \n          Temperature(°C)               Humidity(%)          Wind speed (m/s) \n                        0                         0                         0 \n         Visibility (10m) Dew point temperature(°C)   Solar Radiation (MJ/m2) \n                        0                         0                         0 \n             Rainfall(mm)             Snowfall (cm)                   Seasons \n                        0                         0                         0 \n                  Holiday           Functioning Day \n                        0                         0 \n\n\nLuckily there appears to be no missing data! Next, let’s check the column types to make sure the values within the columns make sense.\n\nbike_data\n\n# A tibble: 8,760 × 14\n   Date       `Rented Bike Count`  Hour `Temperature(°C)` `Humidity(%)`\n   &lt;chr&gt;                    &lt;dbl&gt; &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n 1 01/12/2017                 254     0              -5.2            37\n 2 01/12/2017                 204     1              -5.5            38\n 3 01/12/2017                 173     2              -6              39\n 4 01/12/2017                 107     3              -6.2            40\n 5 01/12/2017                  78     4              -6              36\n 6 01/12/2017                 100     5              -6.4            37\n 7 01/12/2017                 181     6              -6.6            35\n 8 01/12/2017                 460     7              -7.4            38\n 9 01/12/2017                 930     8              -7.6            37\n10 01/12/2017                 490     9              -6.5            27\n# ℹ 8,750 more rows\n# ℹ 9 more variables: `Wind speed (m/s)` &lt;dbl&gt;, `Visibility (10m)` &lt;dbl&gt;,\n#   `Dew point temperature(°C)` &lt;dbl&gt;, `Solar Radiation (MJ/m2)` &lt;dbl&gt;,\n#   `Rainfall(mm)` &lt;dbl&gt;, `Snowfall (cm)` &lt;dbl&gt;, Seasons &lt;chr&gt;, Holiday &lt;chr&gt;,\n#   `Functioning Day` &lt;chr&gt;\n\n\nThe data in the Hour column should really be of type “character”, since it is representing the hour in a day, which will always be between 0 and 23.\nAdditionally, the Date column needs to be converted to actual dates.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nbike_data &lt;- bike_data |&gt;\n  mutate(Hour = as.character(Hour),\n         Date = mdy(Date))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `Date = mdy(Date)`.\nCaused by warning:\n!  5304 failed to parse.\n\nbike_data\n\n# A tibble: 8,760 × 14\n   Date       `Rented Bike Count` Hour  `Temperature(°C)` `Humidity(%)`\n   &lt;date&gt;                   &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n 1 2017-01-12                 254 0                  -5.2            37\n 2 2017-01-12                 204 1                  -5.5            38\n 3 2017-01-12                 173 2                  -6              39\n 4 2017-01-12                 107 3                  -6.2            40\n 5 2017-01-12                  78 4                  -6              36\n 6 2017-01-12                 100 5                  -6.4            37\n 7 2017-01-12                 181 6                  -6.6            35\n 8 2017-01-12                 460 7                  -7.4            38\n 9 2017-01-12                 930 8                  -7.6            37\n10 2017-01-12                 490 9                  -6.5            27\n# ℹ 8,750 more rows\n# ℹ 9 more variables: `Wind speed (m/s)` &lt;dbl&gt;, `Visibility (10m)` &lt;dbl&gt;,\n#   `Dew point temperature(°C)` &lt;dbl&gt;, `Solar Radiation (MJ/m2)` &lt;dbl&gt;,\n#   `Rainfall(mm)` &lt;dbl&gt;, `Snowfall (cm)` &lt;dbl&gt;, Seasons &lt;chr&gt;, Holiday &lt;chr&gt;,\n#   `Functioning Day` &lt;chr&gt;\n\n\nIt also seems like it would be a good idea to coerce the data in Seasons, Holiday, and Functioning Day to be factors since they only take on a few distinct, non-numeric values.\n\nbike_data &lt;- bike_data |&gt;\n  mutate(Seasons = as.factor(Seasons),\n         Holiday = as.factor(Holiday),\n         `Functioning Day` = as.factor(`Functioning Day`))\nbike_data\n\n# A tibble: 8,760 × 14\n   Date       `Rented Bike Count` Hour  `Temperature(°C)` `Humidity(%)`\n   &lt;date&gt;                   &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n 1 2017-01-12                 254 0                  -5.2            37\n 2 2017-01-12                 204 1                  -5.5            38\n 3 2017-01-12                 173 2                  -6              39\n 4 2017-01-12                 107 3                  -6.2            40\n 5 2017-01-12                  78 4                  -6              36\n 6 2017-01-12                 100 5                  -6.4            37\n 7 2017-01-12                 181 6                  -6.6            35\n 8 2017-01-12                 460 7                  -7.4            38\n 9 2017-01-12                 930 8                  -7.6            37\n10 2017-01-12                 490 9                  -6.5            27\n# ℹ 8,750 more rows\n# ℹ 9 more variables: `Wind speed (m/s)` &lt;dbl&gt;, `Visibility (10m)` &lt;dbl&gt;,\n#   `Dew point temperature(°C)` &lt;dbl&gt;, `Solar Radiation (MJ/m2)` &lt;dbl&gt;,\n#   `Rainfall(mm)` &lt;dbl&gt;, `Snowfall (cm)` &lt;dbl&gt;, Seasons &lt;fct&gt;, Holiday &lt;fct&gt;,\n#   `Functioning Day` &lt;fct&gt;\n\n\nLastly, let’s rename the variables in lower snake case.\n\nbike_data &lt;- bike_data |&gt;\n  rename(\"date\" = \"Date\", \"rented_bike_count\" = \"Rented Bike Count\", \"hour\"\n         = \"Hour\", \"temperature\" = \"Temperature(°C)\", \"humidity\" = \n         \"Humidity(%)\", \"wind_speed\" = \"Wind speed (m/s)\", \"visibility\" =\n         \"Visibility (10m)\", \"dew_point_temperature\" = \n           \"Dew point temperature(°C)\", \"solar_radiation\" = \n           \"Solar Radiation (MJ/m2)\",\n         \"rainfall\" = \"Rainfall(mm)\", \"snowfall\" = \"Snowfall (cm)\", \n         \"seasons\" = \"Seasons\", \"holiday\" = \"Holiday\", \"functioning_day\" = \n         \"Functioning Day\")\nbike_data\n\n# A tibble: 8,760 × 14\n   date       rented_bike_count hour  temperature humidity wind_speed visibility\n   &lt;date&gt;                 &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1 2017-01-12               254 0            -5.2       37        2.2       2000\n 2 2017-01-12               204 1            -5.5       38        0.8       2000\n 3 2017-01-12               173 2            -6         39        1         2000\n 4 2017-01-12               107 3            -6.2       40        0.9       2000\n 5 2017-01-12                78 4            -6         36        2.3       2000\n 6 2017-01-12               100 5            -6.4       37        1.5       2000\n 7 2017-01-12               181 6            -6.6       35        1.3       2000\n 8 2017-01-12               460 7            -7.4       38        0.9       2000\n 9 2017-01-12               930 8            -7.6       37        1.1       2000\n10 2017-01-12               490 9            -6.5       27        0.5       1928\n# ℹ 8,750 more rows\n# ℹ 7 more variables: dew_point_temperature &lt;dbl&gt;, solar_radiation &lt;dbl&gt;,\n#   rainfall &lt;dbl&gt;, snowfall &lt;dbl&gt;, seasons &lt;fct&gt;, holiday &lt;fct&gt;,\n#   functioning_day &lt;fct&gt;\n\n\nNow, grouping by date, seasons, and holiday, we will compute the sum of rented_bike_count, rainfall, and snowfall, and also compute the mean of all weather related variables. The data we obtain by doing this will be the data that we do modeling on.\n\nbike_data &lt;- bike_data |&gt;\n  group_by(date, seasons, holiday) |&gt;\n  summarize(across(c(rented_bike_count, rainfall, snowfall), \n                   list(\"sum\" = sum), \n                   .names = \"{.fn}_{.col}\"),\n            across(c(temperature, humidity, wind_speed,\n                     dew_point_temperature, solar_radiation,\n                     rainfall, snowfall),\n                   list(\"mean\" = mean),\n                   .names = \"{.fn}_{.col}\"))\n\n`summarise()` has grouped output by 'date', 'seasons'. You can override using\nthe `.groups` argument."
  },
  {
    "objectID": "Modeling Practice.html#data-split",
    "href": "Modeling Practice.html#data-split",
    "title": "Modeling Practice",
    "section": "Data Split",
    "text": "Data Split\nFirst, we split the data into a training and test set (using a 75/25 split).\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n\n\n✔ broom        1.0.6     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tibble       3.2.1\n✔ ggplot2      3.5.1     ✔ tidyr        1.3.1\n✔ infer        1.0.7     ✔ tune         1.2.1\n✔ modeldata    1.4.0     ✔ workflows    1.1.4\n✔ parsnip      1.2.1     ✔ workflowsets 1.1.0\n✔ purrr        1.0.2     ✔ yardstick    1.3.1\n✔ recipes      1.1.0     \n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard()  masks scales::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use tidymodels_prefer() to resolve common conflicts.\n\nset.seed(1)\nbike_split &lt;- initial_split(bike_data, prop = 0.75, strata = seasons)\nbike_train &lt;- training(bike_split)\nbike_test &lt;- testing(bike_split)\n\nNext, on the training set, we want to create a 10 fold CV split. The function below takes as input data and the number folds we want, and outputs a CV split.\n\nget_cv_splits &lt;- function(data, num_folds){\n  #get fold size\n  size_fold &lt;- floor(nrow(data)/num_folds)\n  #get random indices to subset the data with\n  random_indices &lt;- sample(1:nrow(data), size = nrow(data), replace = FALSE)\n  #create a list to save our folds in\n  folds &lt;- list()\n  #now cycle through our random indices vector and take the appropriate observations to each fold\n  for(i in 1:num_folds){\n    if (i &lt; num_folds) {\n      fold_index &lt;- seq(from = (i-1)*size_fold +1, to = i*size_fold, by = 1)\n      folds[[i]] &lt;- data[random_indices[fold_index], ]\n    } else {\n      fold_index &lt;- seq(from = (i-1)*size_fold +1, to = length(random_indices), by = 1)\n      folds[[i]] &lt;- data[random_indices[fold_index], ]\n    }\n  }\n  return(folds)\n}\n\nTherefore, our 10 fold CV split is given by:\n\nfolds &lt;- get_cv_splits(bike_train, 10)"
  },
  {
    "objectID": "Modeling Practice.html#fitting-mlr-models",
    "href": "Modeling Practice.html#fitting-mlr-models",
    "title": "Modeling Practice",
    "section": "Fitting MLR Models",
    "text": "Fitting MLR Models"
  }
]